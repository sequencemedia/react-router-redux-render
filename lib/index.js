"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.render=render;exports.renderToStaticMarkup=renderToStaticMarkup;exports.renderToString=renderToString;var _react=_interopRequireDefault(require("react"));var _server=_interopRequireDefault(require("react-dom/server"));var _reactRedux=require("react-redux");var _server2=require("react-router-dom/server");var _boom=_interopRequireDefault(require("@hapi/boom"));var _debug=_interopRequireDefault(require("debug"));const log=(0,_debug.default)('@sequencemedia/react-router-redux-render');log('`react-router-redux-render` is awake');const badImplementation=(e,data)=>_boom.default.boomify(e,{statusCode:500,message:'Rendering exception',data});const notFound=data=>_boom.default.notFound('Routing exception',data);function getReactDOMServerRenderToString(store,routerProps,routes){try{return _server.default.renderToString(_react.default.createElement(_reactRedux.Provider,{store:store},_react.default.createElement(_server2.StaticRouter,routerProps,routes)));}catch(e){log(e);throw badImplementation(e,routerProps);}}function getReactDOMServerRenderToStaticMarkup(store,routerProps,routes){try{return _server.default.renderToStaticMarkup(_react.default.createElement(_reactRedux.Provider,{store:store},_react.default.createElement(_server2.StaticRouter,routerProps,routes)));}catch(e){log(e);throw badImplementation(e,routerProps);}}function renderToString(store,{location,context={},...router}={},routes={}){const routerProps={...router,location,context};const string=getReactDOMServerRenderToString(store,routerProps,routes);if(string)return string;throw notFound(routerProps);}function renderToStaticMarkup(store,{location,context={},...router}={},routes={}){const routerProps={...router,location,context};const string=getReactDOMServerRenderToStaticMarkup(store,routerProps,routes);if(string)return string;throw notFound(routerProps);}async function render(store,{location,context={},...router}={},routes={}){const routerProps={...router,location,context};const string=getReactDOMServerRenderToString(store,routerProps,routes);if(string)return string;throw notFound({...router,location,context});}